#!/usr/bin/env escript

main([InFileName, OutFileName]) ->
    {ok, OutFile} = file:open(OutFileName, [write]),
    {ok, Terms} = file:consult(InFileName),
    io:format(OutFile, "events: Instructions~n", []),
    process_terms(OutFile, Terms).

process_terms(OutFile, []) ->
    file:close(OutFile);
process_terms(OutFile, [{analysis_options, _Opt} | Rest]) ->
    process_terms(OutFile, Rest);
process_terms(OutFile, [List | Rest]) when is_list(List) ->
    process_terms(OutFile, Rest);
process_terms(OutFile, [Entry | Rest]) ->
    process_entry(OutFile, Entry),
    process_terms(OutFile, Rest).

process_entry(OutFile, {_CallingList, Actual, CalledList}) ->
    process_actual(OutFile, Actual),
    process_called_list(OutFile, CalledList).

process_actual(OutFile, {Func, _Cnt, _Acc, Own}) ->
    io:format(OutFile, "fl=~w~n", [file]),
    io:format(OutFile, "fn=~w~n", [Func]),
    io:format(OutFile, "1 ~w~n", [trunc(Own*1000)]).

process_called_list(_, []) ->
    ok;
process_called_list(OutFile, [Called | Rest]) ->
    process_called(OutFile, Called),
    process_called_list(OutFile, Rest).

process_called(OutFile, {Func, Cnt, Acc, _Own}) ->
    io:format(OutFile, "cfl=~w~n", [file]),
    io:format(OutFile, "cfn=~w~n", [Func]),
    io:format(OutFile, "calls=~w 1~n", [Cnt]),
    io:format(OutFile, "1 ~w~n", [trunc(Acc*1000)]).
